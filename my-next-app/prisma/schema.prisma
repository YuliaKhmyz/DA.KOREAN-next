// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  isAdmin  Boolean @default(false)

  posts    Post[]
  comments Comment[]

  boughtCalligraphies BoughtCalligraphy[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  BoughtCourse BoughtCourse[]

  @@map("users")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Course {
  id                          Int            @id @default(autoincrement())
  title                       String
  description                 String
  primarySectionTitle         String
  primarySectionDescription   String
  secondarySectionTitle       String
  secondarySectionDescription String
  price                       Int
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
  BoughtCourse                BoughtCourse[]

  @@map("courses")
}

model CalligraphyCourse {
  id          Int    @id @default(autoincrement())
  title       String
  koreanTitle String
  link        String
  image       String
  price       Int

  boughtCalligraphies BoughtCalligraphy[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("calligraphyCourses")
}

model BoughtCalligraphy {
  userId        Int
  calligraphyId Int

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  calligraphy CalligraphyCourse @relation(fields: [calligraphyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, calligraphyId])
  @@index([userId], name: "indexBoughtCalligraphyUser")
  @@index([calligraphyId], name: "indexBoughtCalligraphiesCalligraphy")
  @@map("boughtCalligraphies")
}

model BoughtCourse {
  userId   Int
  courseId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId], name: "indexBoughtCoursesUser")
  @@index([courseId], name: "indexBoughtCoursesCourse")
  @@map("boughtCourses")
}

model Post {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  image   String
  userId  Int

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts") // Имя таблицы в базе данных
}

model Comment {
  id      Int    @id @default(autoincrement())
  userId  Int
  postId  Int
  content String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}
